plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'
}

group 'dev.selena.lua'
version '1.0.9-SNAPSHOT'
apply plugin: 'java'
defaultTasks('build')

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }

    maven {
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven {
        name = "iridiumdevelopment"
        url = uri("https://nexus.iridiumdevelopment.net/repository/maven-releases/")
    }

    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = "https://repo.codemc.org/repository/maven-public/" }
}

dependencies {
    // Tests
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.20:3.24.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    implementation 'org.slf4j:slf4j-simple:2.0.5'
    testImplementation("org.junit.jupiter:junit-jupiter:5.8.1")
    testImplementation('org.mockito:mockito-inline:5.2.0')
    testImplementation('org.mockito:mockito-junit-jupiter:5.2.0')


    implementation 'org.luaj:luaj-jse:3.0.1'
    compileOnly 'org.spigotmc:spigot:1.20.1-R0.1-SNAPSHOT'
    implementation('com.google.code.gson:gson:2.10.1')
    implementation("com.google.guava:guava:31.1-jre")
    compileOnly("io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT")
    implementation("de.tr7zw:item-nbt-api:2.12.1")
    implementation 'io.github.classgraph:classgraph:4.8.162'
    implementation('com.iridium:IridiumColorAPI:1.0.6')
    // TODO make this functional
    compileOnly "dev.jorel:commandapi-bukkit-core:9.3.0"



}


build {
    dependsOn(shadowJar, test)
}


javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    if (System.getenv("DEV_BUILD")) {
        destinationDir = file("/home/web/docs/beta/luacore")
    } else {
        destinationDir = file("/home/web/docs/luacore")
    }

    options
            {
                setMemberLevel JavadocMemberLevel.PUBLIC
                setAuthor true

                links "https://docs.oracle.com/javase/8/docs/api/"
            }
}



task packageJavadoc(type: Jar) {
    dependsOn(build)
    from javadoc
    classifier = 'javadoc'
}

java {
    withSourcesJar()
}

shadowJar {

    dependsOn(jar)
    if (System.getenv("BUILD_NUMBER") == null) {
        archiveName = rootProject.name + "-" + version + ".jar"
    } else {
        archiveName = rootProject.name + "-" + version + "-b" + System.getenv("BUILD_NUMBER") + ".jar"
    }

    dependencies {
        include(dependency('com.google.code.gson:gson'))
        include(dependency('de.tr7zw:item-nbt-api'))
        include(dependency('com.google.guava:guava'))
        include(dependency('org.luaj:luaj-jse'))
        include(dependency('io.github.classgraph:classgraph'))
        include(dependency('com.iridium:IridiumColorAPI'))
    }
    relocate "com.google", "dev.selena.libs"
    relocate "de.tr7zw.changeme", "dev.selena.libs"
    relocate "org.luaj", "dev.selena.libs"
    relocate "io.github", "dev.selena.libs"
    relocate "com.iridium", "dev.selena.libs"

    zip64 true
    subprojects.each { subproject ->
        from subproject.sourceSets.main.output.classesDirs
        from subproject.sourceSets.main.output.resourcesDir
    }

    configurations = [project.configurations.getByName("runtimeClasspath")]
}

publishing {
    repositories {
        maven {
            name = "Public"
            if (version.toString().endsWith("SNAPSHOT")) {
                url = "https://repo.selenadevelopment.com/snapshots"
            } else {
                url = "https://repo.selenadevelopment.com/releases"
            }
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java


            artifact packageJavadoc
            groupId = group
            artifactId = rootProject.name
            version = version

        }
    }
}

test {
    useJUnitPlatform()
}